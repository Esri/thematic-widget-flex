<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2008-2013 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:viewer="com.esri.viewer.*"
                   xmlns:esri="http://www.esri.com/2008/ags"
                   x="600" y="300"
                   currentState="mainState"
                   widgetConfigLoaded="widgetConfigLoadedHandler()">

    <viewer:states>
        <s:State name="mainState"/>
        <s:State name="settingsState"/>
    </viewer:states>

    <viewer:transitions>
        <s:Transition autoReverse="true" toState="*">
            <s:Fade targets="{[settingsState,mainState]}"/>
        </s:Transition>
    </viewer:transitions>

    <fx:Script>
        <![CDATA[
            import com.esri.ags.events.DetailsEvent;
            import com.esri.ags.events.GenerateRendererEvent;
            import com.esri.ags.events.LayerEvent;
            import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
            import com.esri.ags.layers.supportClasses.AllDetails;
            import com.esri.ags.layers.supportClasses.DynamicLayerInfo;
            import com.esri.ags.layers.supportClasses.LayerDetails;
            import com.esri.ags.layers.supportClasses.LayerDrawingOptions;
            import com.esri.ags.layers.supportClasses.LayerMapSource;
            import com.esri.ags.renderers.ClassBreaksRenderer;
            import com.esri.ags.tasks.supportClasses.ClassBreaksDefinition;
            import com.esri.ags.tasks.supportClasses.GenerateRendererParameters;

            import mx.collections.ArrayCollection;
            import mx.collections.ArrayList;
            import mx.controls.Alert;
            import mx.events.ColorPickerEvent;
            import mx.rpc.events.FaultEvent;

            import spark.events.IndexChangeEvent;

            import widgets.Thematic.skins.GRLegendSkin;
            import widgets.Thematic.utils.UIComponentUtil;

            //widget panels
            private var ICON_URL:String;
            [Bindable]
            private var widgetWidth:Number = 400;
            [Bindable]
            private var widgetHeight:Number = 240;
            [Bindable]
            private var mainPanelIcon:String;
            [Bindable]
            private var mainPanelLabel:String;
            [Bindable]
            private var settingsPanelIcon:String;
            [Bindable]
            private var settingsPanelLabel:String;
            //thematic layers
            private var thematicLayersConfig:Array = [];
            //thematic layer
            [Bindable]
            private var thematicLayer:ArcGISDynamicMapServiceLayer;
            private var thematicLayerName:String;
            private var thematicDynamicLayerInfosArray:Array;
            private var thematicLayerMapSource:LayerMapSource;
            private var thematicLayerDetailsArray:Array = [];
            private var thematicLayerDrawingOptions:LayerDrawingOptions;
            //classification
            private var classificationRendererParameters:GenerateRendererParameters = new GenerateRendererParameters();
            private var classificationBreaksDefinition:ClassBreaksDefinition = new ClassBreaksDefinition();
            [Bindable]
            private var classificationMethodsLabelDisplay:String;
            [Bindable]
            private var classificationFieldsLabelDisplay:String;
            [Bindable]
            private var classificationNumberOfBreaksLabel:String;
            private var classificationBreakCount:Number = 6;
            private var classificationMethod:String;
            private var classificationField:String;
            [Bindable]
            private var classificationFieldAlias:String; //used in dynamic labels and layer name
            //color ramps
            [Bindable]
            private var classificationToColorRampDisplay:String;
            [Bindable]
            private var classificationFromColorRampDisplay:String;
            [Bindable]
            private var classificationColorRampFromSelectedColor:uint;
            [Bindable]
            private var classificationColorRampToSelectedColor:uint;
            //transparency
            [Bindable]
            private var transparencyLabelDisplay:String;
            [Bindable]
            private var thematicLayerAlpha:Number;
            //dynamic labeling
            [Bindable]
            private var dynamicLabelsEnabledLabel:String;
            [Bindable]
            private var dynamicLabelsOnLabel:String;
            [Bindable]
            private var dynamicLabelsOffLabel:String;
            private var dynamicLabelsMinScale:Number;
            private var showDynamicLabelInScaleRangeMessage:Boolean = true;

            private var useproxy:Boolean;
            private var proxyurl:String;

            /**
             * Called by BaseWidget when widgetConfigLoaded event
             * is fired.  This is where you will parse the widget's
             * configuration file (if it has one), as well as get any
             * information from the viewer's main configuration file.
             * This is also where you would add any layers, or
             * event listeners to the map which is also available
             * to you at this time as a developer.
             */
            private function widgetConfigLoadedHandler():void
            {
                if (configXML)
                {
                    //--------------------------------------------------------------------------
                    //
                    //  Configure widget width and height
                    //
                    //--------------------------------------------------------------------------
                    var mWidth:String = configXML.ui.widget_dimensions.width || "300";
                    var mHeight:String = configXML.ui.widget_dimensions.height || "300";
                    widgetWidth = Number(mWidth);
                    widgetHeight = Number(mHeight);
                    widgetTemplate.width = widgetWidth;
                    widgetTemplate.height = widgetHeight;
                    //--------------------------------------------------------------------------
                    //
                    //  Configure widget panels
                    //
                    //--------------------------------------------------------------------------
                    ICON_URL = configXML.ui.icons.base_url || "assets/images";
                    mainPanelIcon = configXML.ui.icons.main_icon || "i_widget.png";
                    mainPanelLabel = configXML.ui.icons.main_label || "Main Panel";
                    settingsPanelIcon = configXML.ui.icons.settings_icon || "i_options.png";
                    settingsPanelLabel = configXML.ui.icons.settings_label || "Settings Panel";
                    //add icons to widget
                    widgetTemplate.addTitlebarButton(ICON_URL + mainPanelIcon, mainPanelLabel, showStateMainUI);
                    widgetTemplate.addTitlebarButton(ICON_URL + settingsPanelIcon, settingsPanelLabel, showStateSettingsUI);
                    //--------------------------------------------------------------------------
                    //
                    //  Configure settings panel
                    //
                    //--------------------------------------------------------------------------
                    //classification labels
                    classificationMethodsLabelDisplay = configXML.ui.classification.methodsLabel || "Class Methods";
                    classificationFieldsLabelDisplay = configXML.ui.classification.fieldsLabel || "Class Fields";
                    classificationNumberOfBreaksLabel = configXML.ui.classification.breaksLabel || "Class Breaks";
                    //color ramps labels
                    classificationFromColorRampDisplay = configXML.ui.color_ramp.classificationFromColorRampDisplay || "From Color:";
                    classificationToColorRampDisplay = configXML.ui.color_ramp.classificationToColorRampDisplay || "To Color:";
                    //transparency
                    transparencyLabelDisplay = configXML.ui.transparency.comp_label || "Transparency:";
                    //dynamic labels
                    dynamicLabelsEnabledLabel = configXML.ui.dynamicLabels.dynamicLabelsEnabledLabel || "Label";
                    dynamicLabelsOnLabel = configXML.ui.dynamicLabels.dynamicLabelsOnLabel || "On";
                    dynamicLabelsOffLabel = configXML.ui.dynamicLabels.dynamicLabelsOffLabel || "Off";


                    //--------------------------------------------------------------------------
                    //
                    //  loop through all the layers in the config file
                    //
                    //--------------------------------------------------------------------------
                    var layerList:XMLList = configXML..layer;

                    for (var i:int = 0; i < layerList.length(); i++)
                    {
                        var lyrURL:String = layerList[i].url || "http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer";
                        var lyrName:String = layerList[i].name || "Thematic layer";
                        var lyrAlpha:Number = Number(layerList[i].defaulttransparency) || 1.0;

                        //ask the widget configuration if it wants to use a proxy
                        useproxy = layerList[i].useproxy == "true";
                        if (useproxy && configData.proxyUrl)
                        {
                            //configure proxy url from main configuration file
                            proxyurl = configData.proxyUrl;
                        }

                        var taskURL:String = lyrURL + "/" + layerList[i].classificationLayerID;

                        var parsedVisibleLayer:Number = parseInt(layerList[i].classificationLayerID);
                        var visibleLayer:Number = isNaN(parsedVisibleLayer) ? 0 : parsedVisibleLayer;

                        var parsedZoomScale:Number = parseInt(layerList[i].zoomscale);
                        var zoomScale:Number = isNaN(parsedZoomScale) ? 0 : parsedZoomScale;

                        var classificationLayerName:String = layerList[i].classificationLayerName || "states";

                        //classification methods
                        var classificationMethodsLabelConfig:String = layerList[i].classificationMethodTypeDescs;
                        var classificationMethodsDataConfig:String = layerList[i].classificationMethodTypes;
                        var classificationMethodsAC:ArrayCollection = UIComponentUtil.getComboBoxDataProvider(classificationMethodsLabelConfig, classificationMethodsDataConfig);

                        //classification fields
                        var classificationFieldsLabelConfig:String = layerList[i].classificationFieldTypeDescs;
                        var classificationFieldsDataConfig:String = layerList[i].classificationFieldTypes;
                        var classificationFieldsAC:ArrayCollection = UIComponentUtil.getComboBoxDataProvider(classificationFieldsLabelConfig, classificationFieldsDataConfig);

                        //classification breaks
                        var classificationMinimumNumberOfBreaks:Number = Number(layerList[i].classificationBreaksMin) || 5;
                        var classificationMaximumNumberOfBreaks:Number = Number(layerList[i].classificationBreaksMax) || 11;
                        var classificationDefaultNumberOfBreaks:Number = Number(layerList[i].classificationBreaksDefault) || 4;
                        //color ramps
                        var classificationColorRampFromColor:uint = uint(layerList[i].classificationFromColorRamp) || uint(getStyle('chromeColor'));
                        var classificationColorRampToColor:uint = uint(layerList[i].classificationToColorRamp) || uint(getStyle('focusColor'));

                        //dynamic labels
                        var thematicLabelOptionsMinScale:Number = Number(layerList[i].dynamicLabelingMinScale) || 18489297;
                        //label class and label options
                        var thematicLabelClassLabelPlacement:String = layerList[i].dynamicLabelingPlacement;
                        var thematicLabelOptionsColor:uint = uint(layerList[i].dynamicLabelingFontColor) || 0x333333;
                        var thematicLabelOptionsFontFamily:String = layerList[i].dynamicLabelingFontFamily || "Verdana";
                        var thematicLabelOptionsFontWeight:String = layerList[i].dynamicLabelingFontWeight || "bold";

                        // configuration thematic layer object
                        var layerObject:Object =
                            {
                                label: lyrName,
                                url: lyrURL,
                                id: lyrName + ":" + i,
                                name: "hiddenLayer_" + lyrName,
                                alpha: lyrAlpha,
                                visibleLayer: visibleLayer,
                                proxyURL: proxyurl,
                                zoomScale: zoomScale,
                                generateRendererTaskURL: taskURL,
                                classificationLayerName: classificationLayerName,
                                classificationMethodDataProvider: classificationMethodsAC,
                                classificationFieldsDataProvider: classificationFieldsAC,
                                classificationMinimumNumberOfBreaks: classificationMinimumNumberOfBreaks,
                                classificationMaximumNumberOfBreaks: classificationMaximumNumberOfBreaks,
                                classificationDefaultNumberOfBreaks: classificationDefaultNumberOfBreaks,
                                classificationColorRampFromColor: classificationColorRampFromColor,
                                classificationColorRampToColor: classificationColorRampToColor,
                                thematicLabelOptionsMinScale: thematicLabelOptionsMinScale,
                                thematicLabelClassLabelPlacement: thematicLabelClassLabelPlacement,
                                thematicLabelOptionsColor: thematicLabelOptionsColor,
                                thematicLabelOptionsFontFamily: thematicLabelOptionsFontFamily,
                                thematicLabelOptionsFontWeight: thematicLabelOptionsFontWeight
                            };

                        thematicLayersConfig.push(layerObject);
                    }

                    //after the map has loaded sucessfully interact with the map reference
                    if (map.loaded)
                    {
                        if (thematicLayersConfig.length > 0)
                        {
                            // use the first layer in the configuration as the default
                            var initialLayer:Object = thematicLayersConfig[0] as Object;
                            setThematicLayerConfiguration(initialLayer);
                            // if there are more than one layer in the configuration, enable the drop down list
                            if (thematicLayersConfig.length > 1)
                            {
                                thematicLayersDropDownList.includeInLayout = true;
                                thematicLayersDropDownList.visible = true;
                                thematicLayersDropDownList.dataProvider = new ArrayCollection(thematicLayersConfig);
                            }
                        }
                        else
                        {
                            Alert.show("There needs to be at least one layer in the configuration file.", "ThematicWidget requirement missing");
                        }
                    }
                }
            }

            //--------------------------------------
            //  WidgetTemplate event handler functions
            //--------------------------------------
            /**
             * Called when the widget is closed.  Use this event to
             * process any logic when the widget is closed.  Such as
             * clear any graphic layer graphics, selections,
             * layer visibility, etc.
             */
            private function widgetClosedHandler(event:Event):void
            {
                if (thematicLayer)
                {
                    thematicLayer.visible = false;
                }
            }

            /**
             * Called when the widget is opened.  Use this event to
             * process any logic after the widget is opened.  Such as
             * initializations or setup for the widget that might been
             * cleared out when the widget was closed or minimized.
             * Most often this event is used to make any layers visible
             * that might have been turned off when the widget was closed.
             */
            private function widgetOpenedHandler(event:Event):void
            {
                if (thematicLayer)
                {
                    thematicLayer.visible = true;
                }
            }

            /**
             * Called when the widget is minimized.  Use this event to
             * process any logic when the widget is minimized.
             */
            private function widgetMinimizedHandler(event:Event):void
            {
            }

            //---------------------------------------------
            //	Functions for UI state changes
            //---------------------------------------------
            /**
             * Called when the widget changes to the main state.
             */
            private function showStateMainUI():void
            {
                this.currentState = "mainState";
            }

            /**
             * Called when the widget changes to the settings state.
             */
            private function showStateSettingsUI():void
            {
                this.currentState = "settingsState";
            }

            //---------------------------------------------
            //	Functions for layer load and initialization
            //---------------------------------------------
            protected function setThematicLayerConfiguration(thematicLayerConfig:Object):void
            {
                if (thematicLayer && thematicLayer.loaded)
                {
                    map.removeLayer(thematicLayer);
                }

                //create the layer
                thematicLayer = new ArcGISDynamicMapServiceLayer(thematicLayerConfig.url);
                thematicLayer.id = thematicLayerConfig.id;
                thematicLayer.name = thematicLayerConfig.name;
                thematicLayer.alpha = thematicLayerConfig.alpha;
                thematicLayer.visibleLayers = new ArrayList([ thematicLayerConfig.visibleLayer ]);
                thematicLayer.proxyURL = thematicLayerConfig.proxyurl;
                thematicLayer.addEventListener(LayerEvent.LOAD, thematicLayer_loadHandler, false, 0, true);
                thematicLayer.addEventListener(LayerEvent.LOAD_ERROR, thematicLayer_faultHandler, false, 0, true);

                var _classificationMethodsAC:ArrayCollection = thematicLayerConfig.classificationMethodDataProvider as ArrayCollection;
                if (_classificationMethodsAC.length > 0)
                {
                    var classificationMethodItem:Object = _classificationMethodsAC.getItemAt(0);
                    classificationMethod = classificationMethodItem.data;
                    classificationMethodsDDL.dataProvider = _classificationMethodsAC;
                    classificationMethodsDDL.selectedIndex = 0;
                }
                else
                {
                    classificationMethod = ClassBreaksDefinition.CLASSIFY_EQUAL_INTERVAL;
                }

                var _classificationFieldsAC:ArrayCollection = thematicLayerConfig.classificationFieldsDataProvider as ArrayCollection;
                if (_classificationFieldsAC.length > 0)
                {
                    var defaultClassificationItem:Object = _classificationFieldsAC.getItemAt(0);
                    classificationField = defaultClassificationItem.data;
                    classificationFieldAlias = defaultClassificationItem.label;
                    classificationFieldsDDL.dataProvider = _classificationFieldsAC;
                    classificationFieldsDDL.selectedIndex = 0;
                }
                else
                {
                    classificationField = "POP07_SQMI";
                    classificationFieldAlias = "Pop 2007";
                }

                thematicLayerName = thematicLayerConfig.classificationLayerName;
                //classification breaks
                classificationNumberOfClassBreaksNS.minimum = thematicLayerConfig.classificationMinimumNumberOfBreaks;
                classificationNumberOfClassBreaksNS.maximum = thematicLayerConfig.classificationMaximumNumberOfBreaks;
                classificationNumberOfClassBreaksNS.value = thematicLayerConfig.classificationDefaultNumberOfBreaks;

                //color ramps
                classificationColorRampFromSelectedColor = thematicLayerConfig.classificationColorRampFromColor;
                classificationColorRampToSelectedColor = thematicLayerConfig.classificationColorRampToColor;

                //dynamic labels
                dynamicLabelsMinScale = thematicLayerConfig.thematicLabelOptionsMinScale;
                //label class and label options
                thematicLabelClass.labelPlacement = thematicLayerConfig.thematicLabelClassLabelPlacement;
                thematicLabelOptions.color = thematicLayerConfig.thematicLabelOptionsColor;
                thematicLabelOptions.fontFamily = thematicLayerConfig.thematicLabelOptionsFontFamily;
                thematicLabelOptions.fontWeight = thematicLayerConfig.thematicLabelOptionsFontWeight;

                thematicLayerAlpha = thematicLayer.alpha;
                detailsTask.url = thematicLayer.url;
                detailsTask.proxyURL = thematicLayer.proxyURL;

                generateRendererTask.url = thematicLayerConfig.generateRendererTaskURL;
                generateRendererTask.proxyURL = thematicLayer.proxyURL;

                if (thematicLayerConfig.zoomScale > 0)
                {
                    map.scale = thematicLayerConfig.zoomScale;
                }
                map.addLayer(thematicLayer);
            }

            protected function thematicLayer_loadHandler(event:LayerEvent):void
            {
                thematicDynamicLayerInfosArray = thematicLayer.createDynamicLayerInfosFromLayerInfos();
                if (thematicLayer.supportsDynamicLayers)
                {
                    detailsTask.getAllDetails();
                }
                else
                {
                    Alert.show("Service does not support dynamic layers, please enable dynamic layers on the service.", "ThematicWidget requirement missing");
                }
            }

            protected function thematicLayer_faultHandler(event:LayerEvent):void
            {
                thematicLayer.removeEventListener(LayerEvent.LOAD, thematicLayer_loadHandler);
                thematicLayer.removeEventListener(LayerEvent.LOAD_ERROR, thematicLayer_faultHandler);

                Alert.show("An error occurred while attempting to load the service (" + ArcGISDynamicMapServiceLayer(event.layer).url + ").\n" + event.fault.faultString, "Service error");
            }

            protected function detailsTask_getAllDetailsCompleteHandler(event:DetailsEvent):void
            {
                var details:AllDetails = event.allDetails;
                thematicLayerDetailsArray = details.layersDetails;
                var layerDetails:LayerDetails;

                var layerFound:Boolean = false;
                var layersInService:String = "ID:Name\n";

                for (var i:int = 0; i < thematicLayerDetailsArray.length; i++)
                {
                    layerDetails = thematicLayerDetailsArray[i];
                    layersInService += layerDetails.id + ":" + layerDetails.name + "\n";
                    if (layerDetails.name.toLowerCase() == thematicLayerName.toLowerCase() && thematicDynamicLayerInfosArray)
                    {
                        thematicLayerMapSource = DynamicLayerInfo(thematicDynamicLayerInfosArray[i]).source as LayerMapSource;
                        generateRendererTask.source = thematicLayerMapSource;
                        layerFound = true;
                        break;
                    }
                }

                if (!layerFound)
                {
                    Alert.show("Unable to find " + thematicLayerName + " in the configured service layers.\n" + layersInService, "ThematicWidget requirement missing");
                }
                else
                {
                    generateRenderer();
                }
            }

            protected function detailsTask_faultHandler(event:FaultEvent):void
            {
                Alert.show("Error code(" + event.fault.faultCode + "): " + event.fault.faultString, "Unable to determine service metadata details");
            }

            //---------------------------------------------
            //	Functions for creating thematic renderer
            //---------------------------------------------
            protected function generateRenderer():void
            {
                classificationBreaksDefinition.breakCount = classificationBreakCount;
                classificationBreaksDefinition.classificationField = classificationField;
                classificationBreaksDefinition.classificationMethod = classificationMethod;
                colorRamp.fromColor = classificationColorRampFromSelectedColor;
                colorRamp.toColor = classificationColorRampToSelectedColor;
                classificationBreaksDefinition.colorRamp = colorRamp;
                classificationRendererParameters.classificationDefinition = classificationBreaksDefinition;
                //call the server to generate the renderer
                generateRendererTask.execute(classificationRendererParameters);
            }

            protected function generateRendererTask_executeCompleteHandler(event:GenerateRendererEvent):void
            {
                var renderer:ClassBreaksRenderer = event.renderer as ClassBreaksRenderer;
                thematicLayerDrawingOptions = new LayerDrawingOptions();
                thematicLayerDrawingOptions.layerId = thematicLayerMapSource.mapLayerId; //states layer id in the service
                thematicLayerDrawingOptions.renderer = renderer;

                if (showDynamicLabelsToggleButton.selected)
                {
                    thematicLayerDrawingOptions.showLabels = true;
                    //set the labelExpression field name (e.g. [POP07_SQMI])
                    thematicLabelClass.labelExpression = '"' + classificationFieldAlias + '" CONCAT NEWLINE CONCAT [' + classificationField + ']';
                    thematicLabelClass.minScale = dynamicLabelsMinScale;
                    thematicLayerDrawingOptions.labelClasses = [ thematicLabelClass ];
                }
                else
                {
                    thematicLayerDrawingOptions.showLabels = false;
                }
                thematicLayer.alpha = thematicLayerAlpha;
                thematicLayer.name = classificationFieldAlias;
                var layerDrawingOptionsArr:Array = [ thematicLayerDrawingOptions ];
                thematicLayer.layerDrawingOptions = layerDrawingOptionsArr;
                legend.layers = [ thematicLayer ];
            }

            //------------------------------------------------
            //	Functions for classification and layer changes
            //------------------------------------------------
            protected function classificationMethodsDDL_changeHandler(event:IndexChangeEvent):void
            {
                classificationMethod = DropDownList(event.currentTarget).selectedItem.data;
                generateRenderer();
            }

            protected function classificationFieldsDDL_changeHandler(event:IndexChangeEvent):void
            {
                classificationField = DropDownList(event.currentTarget).selectedItem.data;
                classificationFieldAlias = DropDownList(event.currentTarget).selectedItem.label;
                generateRenderer();
            }

            protected function classificationNumberOfClassBreaksNS_changeHandler(event:Event):void
            {
                classificationBreakCount = NumericStepper(event.currentTarget).value;
                generateRenderer();
            }

            protected function colorRamp_changeHandler(event:ColorPickerEvent):void
            {
                event.currentTarget.id == "classificationFromColorRampPicker" ? classificationColorRampFromSelectedColor = event.color : classificationColorRampToSelectedColor = event.color;
                generateRenderer();
            }

            protected function transparencyChangeHandler(event:Event):void
            {
                thematicLayerAlpha = sliderTransparency.value;
                thematicLayer.alpha = thematicLayerAlpha;
            }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <esri:DetailsTask id="detailsTask"
                          fault="detailsTask_faultHandler(event)"
                          getAllDetailsComplete="detailsTask_getAllDetailsCompleteHandler(event)"/>
        <esri:GenerateRendererTask id="generateRendererTask"
                                   executeComplete="generateRendererTask_executeCompleteHandler(event)"
                                   fault="generateRendererTask_faultHandler(event)"/>
        <esri:AlgorithmicColorRamp id="colorRamp" algorithm="esriHSVAlgorithm"/>
        <esri:LabelClass id="thematicLabelClass">
            <esri:LabelOptions id="thematicLabelOptions"/>
        </esri:LabelClass>
    </fx:Declarations>

    <viewer:WidgetTemplate id="widgetTemplate"
                           closed="widgetClosedHandler(event)"
                           minimized="widgetMinimizedHandler(event)"
                           open="widgetOpenedHandler(event)"
                           widgetHeight="{widgetHeight}"
                           widgetWidth="{widgetWidth}">
        <!-- legend panel -->
        <s:Group id="mainState"
                 width="100%" height="100%"
                 visible="false"
                 visible.mainState="true">
            <s:layout>
                <s:VerticalLayout gap="6"
                                  horizontalAlign="center"
                                  paddingLeft="5"/>
            </s:layout>
            <s:Scroller width="100%" height="100%">
                <s:VGroup>
                    <esri:Legend id="legend"
                                 left="5" right="5" top="5" bottom="5"
                                 layers="{[thematicLayer]}"
                                 map="{map}"
                                 skinClass="widgets.Thematic.skins.GRLegendSkin"/>
                </s:VGroup>
            </s:Scroller>
        </s:Group>
        <!-- configuration settings panel -->
        <s:Group id="settingsState"
                 width="100%" height="100%"
                 visible="false"
                 visible.settingsState="true">
            <s:layout>
                <s:VerticalLayout gap="5"
                                  horizontalAlign="left"
                                  paddingLeft="5"/>
            </s:layout>
            <!-- thematic layers drop down list -->
            <s:DropDownList id="thematicLayersDropDownList"
                            width="90%"
                            change="thematicLayersDropDownList_changeHandler(event)"
                            includeInLayout="false"
                            requireSelection="true"
                            visible="false">
                <s:itemRenderer>
                    <fx:Component>
                        <s:ItemRenderer>
                            <s:states>
                                <s:State name="normal"/>
                                <s:State name="hovered"/>
                                <s:State name="selected"/>
                            </s:states>
                            <s:Label width="100%" height="20"
                                     left="5" right="5"
                                     fontWeight.selected="bold"
                                     text="{data.label}"
                                     verticalAlign="middle"/>
                        </s:ItemRenderer>
                    </fx:Component>
                </s:itemRenderer>
            </s:DropDownList>
            <!-- classification methods user interface -->
            <s:HGroup width="100%"
                      gap="5"
                      horizontalAlign="left"
                      verticalAlign="middle">
                <s:Label width="100" text="{classificationMethodsLabelDisplay}"/>
                <s:DropDownList id="classificationMethodsDDL"
                                width="100%"
                                change="classificationMethodsDDL_changeHandler(event)"
                                requireSelection="true"/>
            </s:HGroup>
            <!-- classification field user interface -->
            <s:HGroup width="100%"
                      gap="5"
                      horizontalAlign="left"
                      verticalAlign="middle">
                <s:Label width="100" text="{classificationFieldsLabelDisplay}"/>
                <s:DropDownList id="classificationFieldsDDL"
                                width="100%"
                                change="classificationFieldsDDL_changeHandler(event)"
                                requireSelection="true"/>
            </s:HGroup>
            <!-- classification number of breaks user interface -->
            <s:HGroup width="100%"
                      gap="5"
                      horizontalAlign="left"
                      verticalAlign="middle">
                <s:Label width="100" text="{classificationNumberOfBreaksLabel}"/>
                <s:NumericStepper id="classificationNumberOfClassBreaksNS" change="classificationNumberOfClassBreaksNS_changeHandler(event)"/>
            </s:HGroup>
            <!-- color ramp: to color user interface -->
            <s:HGroup width="100%"
                      gap="5"
                      horizontalAlign="left"
                      verticalAlign="middle">
                <s:Label width="100" text="{classificationToColorRampDisplay}"/>
                <mx:ColorPicker id="classificationToColorRampPicker"
                                width="53"
                                change="colorRamp_changeHandler(event)"
                                selectedColor="{classificationColorRampToSelectedColor}"/>
            </s:HGroup>
            <!-- color ramp: from color user interface -->
            <s:HGroup width="100%"
                      gap="5"
                      horizontalAlign="left"
                      verticalAlign="middle">
                <s:Label width="100" text="{classificationFromColorRampDisplay}"/>
                <mx:ColorPicker id="classificationFromColorRampPicker"
                                width="53"
                                change="colorRamp_changeHandler(event)"
                                selectedColor="{classificationColorRampFromSelectedColor}"/>
            </s:HGroup>
            <!-- transparency user interface -->
            <s:HGroup width="100%"
                      gap="5"
                      horizontalAlign="left"
                      verticalAlign="middle">
                <s:Label width="100" text="{transparencyLabelDisplay}"/>
                <s:HSlider id="sliderTransparency"
                           width="100%"
                           change="transparencyChangeHandler(event)"
                           liveDragging="true"
                           maximum="1"
                           minimum="0"
                           showDataTip="true"
                           stepSize="0.1"
                           value="{thematicLayerAlpha}"/>
            </s:HGroup>
            <!-- dynamic labels user interface  -->
            <s:HGroup width="100%"
                      gap="5"
                      horizontalAlign="left"
                      verticalAlign="middle">
                <s:Label width="100" text="{dynamicLabelsEnabledLabel}"/>
                <s:ToggleButton id="showDynamicLabelsToggleButton"
                                click="generateRenderer()"
                                label="{showDynamicLabelsToggleButton.selected ? dynamicLabelsOnLabel : dynamicLabelsOffLabel}"
                                selected="false"/>
            </s:HGroup>
        </s:Group>
    </viewer:WidgetTemplate>
</viewer:BaseWidget>
