<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2008-2013 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:viewer="com.esri.viewer.*"
                   xmlns:esri="http://www.esri.com/2008/ags"
                   x="600" y="300"
                   currentState="mainState"
                   widgetConfigLoaded="widgetConfigLoadedHandler()">
    <!--
    Description:
    This file provides an example of what your starting codebase might
    be for creating a custom widget.  This file contains all the code for creating
    a widget with two user interfaces, a main panel and a settings panel.
    These interfaces are represented by the mxml Group components with
    ids named 'mainState' and 'settingsState'.

    Most widgets will implement both BaseWidget and WidgetTemplate.  One key
    aspect of BaseWidget is the event named widgetConfigLoaded, in this
    example when the event is fired a function named widgetConfigLoadedHandler is called.
    This is where you can do your preprocessing before the widget is presented to
    the user interface.  It is at this point where we can parse the widget's
    configuration file (configXML is the variable), as well as look into the
    viewer's main configuration file (configData is the variable).

    The WidgetTemplate's events 'closed', 'minimized', and 'open' are also very
    important.  The functions called by these events are where you can
    respond to the widget being closed, minimized, or opened from the user
    interface.

    Documentation:
    See the resource center for more information.
    http://resources.arcgis.com/en/help/flex-viewer/concepts/index.html#/Creating_widgets/01m300000010000000/
    http://resources.arcgis.com/en/help/flex-viewer/concepts/index.html#/Widget_life_cycle/01m300000024000000/
    -->
    <viewer:states>
        <s:State name="mainState"/>
        <s:State name="settingsState"/>
    </viewer:states>

    <viewer:transitions>
        <s:Transition autoReverse="true" toState="*">
            <s:Fade targets="{[settingsState,mainState]}"/>
        </s:Transition>
    </viewer:transitions>
    <fx:Script>
        <![CDATA[
            import com.esri.ags.events.DetailsEvent;
            import com.esri.ags.events.GenerateRendererEvent;
            import com.esri.ags.events.LayerEvent;
            import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
            import com.esri.ags.layers.supportClasses.AllDetails;
            import com.esri.ags.layers.supportClasses.DynamicLayerInfo;
            import com.esri.ags.layers.supportClasses.LayerDetails;
            import com.esri.ags.layers.supportClasses.LayerDrawingOptions;
            import com.esri.ags.layers.supportClasses.LayerMapSource;
            import com.esri.ags.renderers.ClassBreaksRenderer;
            import com.esri.ags.tasks.supportClasses.ClassBreaksDefinition;
            import com.esri.ags.tasks.supportClasses.GenerateRendererParameters;

            import mx.collections.ArrayList;
            import mx.controls.Alert;
            import mx.events.ColorPickerEvent;
            import mx.rpc.events.FaultEvent;

            import spark.events.IndexChangeEvent;

            import widgets.Thematic.skins.GRLegendSkin;
            import widgets.Thematic.utils.UIComponentUtil;

            private var dynamicLayerInfosArr:Array;
            private var layerMapSource:LayerMapSource;
            private var generateRendererParams:GenerateRendererParameters = new GenerateRendererParameters();
            private var classBreaksDefinition:ClassBreaksDefinition = new ClassBreaksDefinition();

            private var layerDetailsArr:Array = [];
            private var _breakCount:Number = 6;
            private var _classificationMethod:String = ClassBreaksDefinition.CLASSIFY_QUANTILE;
            private var _classificationField:String;

            [Bindable]
            private var demographicsLayer:ArcGISDynamicMapServiceLayer;
            [Bindable]
            private var thematicLayerAlpha:Number;
            private var classificationLayerName:String;
            //-----------------------------
            //  END: STEP 1 - ADD VARIABLES
            //-----------------------------
            private var ICON_URL:String;
            [Bindable]
            private var wWidth:Number = 400;
            [Bindable]
            private var wHeight:Number = 240;

            [Bindable]
            private var mainIcon:String;
            [Bindable]
            private var mainLabel:String;
            [Bindable]
            private var settingsIcon:String;
            [Bindable]
            private var settingsLabel:String;
            [Bindable]
            private var transpCompLabel:String;
            //color ramps
            [Bindable]
            private var toColorLabel:String;
            [Bindable]
            private var fromColorLabel:String;
            [Bindable]
            private var colorRampFromSelectedColor:uint;
            [Bindable]
            private var colorRampToSelectedColor:uint;
            //classification
            [Bindable]
            private var classificationMethodsLabel:String;
            [Bindable]
            private var classificationFieldsLabel:String;
            [Bindable]
            private var classificationBreaksLabel:String;

            private var useproxy:Boolean;
            private var proxyurl:String;

            /**
             * Called by BaseWidget when widgetConfigLoaded event
             * is fired.  This is where you will parse the widget's
             * configuration file (if it has one), as well as get any
             * information from the viewer's main configuration file.
             * This is also where you would add any layers, or
             * event listeners to the map which is also available
             * to you at this time as a developer.
             */
            private function widgetConfigLoadedHandler():void
            {
                if (configXML)
                {
                    //configure widget width and height
                    var mWidth:String = configXML.ui.widget_dimensions.width || "300";
                    var mHeight:String = configXML.ui.widget_dimensions.height || "300";
                    wWidth = Number(mWidth);
                    wHeight = Number(mHeight);
                    wTemplate.width = wWidth;
                    wTemplate.height = wHeight;

                    //configure UI: assets, icons, etc.
                    ICON_URL = configXML.ui.icons.base_url || "assets/images";
                    mainIcon = configXML.ui.icons.main_icon || "i_widget.png";
                    mainLabel = configXML.ui.icons.main_label || "Main Panel";
                    settingsIcon = configXML.ui.icons.settings_icon || "i_options.png";
                    settingsLabel = configXML.ui.icons.settings_label || "Settings Panel";
                    //transparency
                    thematicLayerAlpha = Number(configXML.ui.transparency.defaulttransparency) || 1.0;
                    transpCompLabel = configXML.ui.transparency.comp_label || "Transparency:";
                    //color ramps
                    fromColorLabel = configXML.ui.color_ramp.fromColorLabel || "From Color:";
                    toColorLabel = configXML.ui.color_ramp.toColorLabel || "To Color:";
                    colorRampFromSelectedColor = uint(configXML.ui.color_ramp.classificationFromColor) || uint(getStyle('chromeColor'));
                    colorRampToSelectedColor = uint(configXML.ui.color_ramp.classificationToColor) || uint(getStyle('focusColor'));
                    //classification labels
                    var classificationMethodsLabelPrompt:String = configXML.ui.classification.methodsLabelPrompt || "Select a type";
                    classificationMethodsLabel = configXML.ui.classification.methodsLabel || "Class Methods";
                    var classificationFieldsLabelPrompt:String = configXML.ui.classification.fieldsLabelPrompt || "Select a type";
                    classificationFieldsLabel = configXML.ui.classification.fieldsLabel || "Class Fields";
                    classificationBreaksLabel = configXML.ui.classification.breaksLabel || "Class Breaks";
                    //classification methods
                    var classificationMethodsLabelConfig:String = configXML.layers.layer.classificationMethodTypeDescs;
                    var classificationMethodsDataConfig:String = configXML.layers.layer.classificationMethodTypes;
                    classificationMethodsDDL.dataProvider = UIComponentUtil.getComboBoxDataProvider(classificationMethodsLabelConfig, classificationMethodsDataConfig, classificationMethodsLabelPrompt);
                    classificationMethodsDDL.selectedIndex = 1;
                    //classification fields
                    var classificationFieldsLabelConfig:String = configXML.layers.layer.classificationFieldTypeDescs;
                    var classificationFieldsDataConfig:String = configXML.layers.layer.classificationFieldTypes;
                    classificationFieldsDDL.dataProvider = UIComponentUtil.getComboBoxDataProvider(classificationFieldsLabelConfig, classificationFieldsDataConfig, classificationFieldsLabelPrompt);
                    classificationFieldsDDL.selectedIndex = 1;
                    _classificationField = classificationFieldsDDL.selectedItem.data || "POP07_SQMI";
                    //classification breaks
                    var classificationMinimumNumberOfBreaks:Number = Number(configXML.layers.layer.classificationBreaksMin) || 5;
                    var classificationMaximumNumberOfBreaks:Number = Number(configXML.layers.layer.classificationBreaksMax) || 11;
                    var classificationDefaultNumberOfBreaks:Number = Number(configXML.layers.layer.classificationBreaksDefault) || 6;
                    numberOfClassBreaks.minimum = classificationMinimumNumberOfBreaks;
                    numberOfClassBreaks.maximum = classificationMaximumNumberOfBreaks;
                    numberOfClassBreaks.value = classificationDefaultNumberOfBreaks;

                    wTemplate.addTitlebarButton(ICON_URL + mainIcon, mainLabel, showStateMainUI);
                    wTemplate.addTitlebarButton(ICON_URL + settingsIcon, settingsLabel, showStateSettingsUI);

                    //ask the widget configuration if it wants to use a proxy
                    useproxy = configXML.layers.layer.useproxy == "true";
                    if (useproxy)
                    {
                        //configure proxy url from main configuration file
                        proxyurl = configData.proxyUrl;
                    }
                    //after the map has loaded sucessfully interact with the map reference
                    if (map.loaded)
                    {
                        //perform any logic related to the map
                        //------------------------------------------------------
                        //  BEGIN: STEP 5 - GET CONFIGURATION FROM WIDGET CONFIG
                        //------------------------------------------------------
                        demographicsLayer = new ArcGISDynamicMapServiceLayer();
                        demographicsLayer.alpha = thematicLayerAlpha;
                        demographicsLayer.name = configXML.layers.layer.name || "Population 2007";
                        demographicsLayer.addEventListener(LayerEvent.LOAD, demographicsLayer_loadHandler, false, 0, true);
                        demographicsLayer.url = configXML.layers.layer.url || "http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer";
                        demographicsLayer.proxyURL = proxyurl;

                        detailsTask.url = configXML.layers.layer.url || "http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer";
                        detailsTask.proxyURL = proxyurl;

                        generateRendererTask.url = configXML.layers.layer.url + "/" + configXML.layers.layer.classificationLayerID;
                        generateRendererTask.proxyURL = proxyurl;

                        classificationLayerName = configXML.layers.layer.classificationLayerName || "states";

                        var visibleLayer:Number = Number(configXML.layers.layer.classificationLayerID) || 3;
                        demographicsLayer.visibleLayers = new ArrayList([ visibleLayer ]);

                        map.addLayer(demographicsLayer);
                            //----------------------------------------------------
                            //  END: STEP 5 - GET CONFIGURATION FROM WIDGET CONFIG
                            //----------------------------------------------------
                    }
                }
            }

            //--------------------------------------
            //  WidgetTemplate event handler functions
            //--------------------------------------
            /**
             * Called when the widget is closed.  Use this event to
             * process any logic when the widget is closed.  Such as
             * clear any graphic layer graphics, selections,
             * layer visibility, etc.
             */
            private function widgetClosedHandler(event:Event):void
            {
                //---------------------------------------------------------------
                //	BEGIN: STEP 6 - HIDE DEMOGRAPHICS LAYER WHEN WIDGET IS CLOSED
                //---------------------------------------------------------------
                if (demographicsLayer)
                {
                    demographicsLayer.visible = false;
                }
                //-------------------------------------------------------------
                //  END: STEP 6 - HIDE DEMOGRAPHICS LAYER WHEN WIDGET IS CLOSED
                //-------------------------------------------------------------
            }

            /**
             * Called when the widget is opened.  Use this event to
             * process any logic after the widget is opened.  Such as
             * initializations or setup for the widget that might been
             * cleared out when the widget was closed or minimized.
             * Most often this event is used to make any layers visible
             * that might have been turned off when the widget was closed.
             */
            private function widgetOpenedHandler(event:Event):void
            {
                //---------------------------------------------------------------
                //	BEGIN: STEP 7 - SHOW DEMOGRAPHICS LAYER WHEN WIDGET IS OPENED
                //---------------------------------------------------------------
                if (demographicsLayer)
                {
                    demographicsLayer.visible = true;
                }
                //-------------------------------------------------------------
                //  END: STEP 7 - SHOW DEMOGRAPHICS LAYER WHEN WIDGET IS OPENED
                //-------------------------------------------------------------
            }

            /**
             * Called when the widget is minimized.  Use this event to
             * process any logic when the widget is minimized.
             */
            protected function widgetMinimizedHandler(event:Event):void
            {
            }

            //---------------------------------------------
            //	Functions for UI state changes
            //---------------------------------------------
            /**
             * Called when the widget changes to the main state.
             */
            private function showStateMainUI():void
            {
                this.currentState = "mainState";
            }

            /**
             * Called when the widget changes to the settings state.
             */
            private function showStateSettingsUI():void
            {
                this.currentState = "settingsState";
            }

            //------------------------------------
            //	BEGIN: STEP 8 - ADD BUSINESS LOGIC
            //------------------------------------
            protected function demographicsLayer_loadHandler(event:LayerEvent):void
            {
                dynamicLayerInfosArr = demographicsLayer.createDynamicLayerInfosFromLayerInfos();
                detailsTask.getAllDetails();
            }

            protected function detailsTask_getAllDetailsCompleteHandler(event:DetailsEvent):void
            {
                var details:AllDetails = event.allDetails;
                layerDetailsArr = details.layersDetails;
                var layerDetails:LayerDetails;

                for (var i:int = 0; i < layerDetailsArr.length; i++)
                {
                    layerDetails = layerDetailsArr[i];
                    if (layerDetails.name.toLowerCase() == classificationLayerName && dynamicLayerInfosArr)
                    {
                        layerMapSource = DynamicLayerInfo(dynamicLayerInfosArr[i]).source as LayerMapSource;
                        generateRendererTask.source = layerMapSource;
                        classBreaksDefinition.breakCount = _breakCount;
                        classBreaksDefinition.classificationField = _classificationField;
                        classBreaksDefinition.classificationMethod = _classificationMethod;
                        colorRamp.fromColor = colorRampFromSelectedColor;
                        colorRamp.toColor = colorRampToSelectedColor;
                        classBreaksDefinition.colorRamp = colorRamp;
                        generateRendererParams.classificationDefinition = classBreaksDefinition;
                        generateRendererTask.execute(generateRendererParams);
                    }
                }
            }

            protected function esriService_faultHandler(event:FaultEvent):void
            {
                Alert.show("Error: " + event.fault.faultString, "Error code: " + event.fault.faultCode);
            }

            protected function generateRendererTask_executeCompleteHandler(event:GenerateRendererEvent):void
            {
                var renderer:ClassBreaksRenderer = event.renderer as ClassBreaksRenderer;
                var layerDrawingOptions:LayerDrawingOptions = new LayerDrawingOptions();
                layerDrawingOptions.layerId = layerMapSource.mapLayerId; //states layer id in the service
                layerDrawingOptions.renderer = renderer;
                demographicsLayer.alpha = 0.7;
                var layerDrawingOptionsArr:Array = [ layerDrawingOptions ];
                demographicsLayer.layerDrawingOptions = layerDrawingOptionsArr;
                legend.layers = [ demographicsLayer ];
                legend.refresh();
            }

            protected function classificationMethodsDDL_changeHandler(event:IndexChangeEvent):void
            {
                var selectedMethodItem:String = DropDownList(event.currentTarget).selectedItem.data;
                if (selectedMethodItem != "-1")
                {
                    _classificationMethod = selectedMethodItem;
                }
                generateRenderer();
            }

            protected function classificationFieldsDDL_changeHandler(event:IndexChangeEvent):void
            {
                var selectedFieldItem:String = DropDownList(event.currentTarget).selectedItem.data;
                if (selectedFieldItem != "-1")
                {
                    _classificationField = selectedFieldItem;
                }
                generateRenderer();
            }

            protected function numberOfClassBreaks_changeHandler(event:Event):void
            {
                _breakCount = NumericStepper(event.currentTarget).value;
                generateRenderer();
            }

            protected function generateRenderer():void
            {
                classBreaksDefinition.breakCount = _breakCount;
                classBreaksDefinition.classificationField = _classificationField;
                classBreaksDefinition.classificationMethod = _classificationMethod;
                colorRamp.fromColor = colorRampFromSelectedColor;
                colorRamp.toColor = colorRampToSelectedColor;
                classBreaksDefinition.colorRamp = colorRamp;
                generateRendererParams.classificationDefinition = classBreaksDefinition;
                generateRendererTask.execute(generateRendererParams);
            }

            //----------------------------------
            //  END: STEP 8 - ADD BUSINESS LOGIC
            //----------------------------------

            protected function transparencyChangeHandler(event:Event):void
            {
                thematicLayerAlpha = sliderTransparency.value;
                demographicsLayer.alpha = thematicLayerAlpha;
            }

            protected function colorRamp_changeHandler(event:ColorPickerEvent):void
            {
                event.currentTarget.id == "colorRampFromColor" ? colorRampFromSelectedColor = event.color : colorRampToSelectedColor = event.color;
                generateRenderer();
            }
        ]]>
    </fx:Script>
    <fx:Declarations>
        <!--
        //  BEGIN: STEP 2 - ADD ANY VARIABLE DECLARATIONS THROUGH MARKUP INSTEAD OF ACTIONSCRIPT
        //-->
        <esri:DetailsTask id="detailsTask"
                          fault="esriService_faultHandler(event)"
                          getAllDetailsComplete="detailsTask_getAllDetailsCompleteHandler(event)"/>
        <esri:GenerateRendererTask id="generateRendererTask"
                                   executeComplete="generateRendererTask_executeCompleteHandler(event)"
                                   fault="esriService_faultHandler(event)"/>
        <esri:AlgorithmicColorRamp id="colorRamp" algorithm="esriHSVAlgorithm"/>
        <!--
        //  END: STEP 2 - ADD ANY VARIABLE DECLARATIONS THROUGH MARKUP INSTEAD OF ACTIONSCRIPT
        //-->
    </fx:Declarations>
    <viewer:WidgetTemplate id="wTemplate"
                           closed="widgetClosedHandler(event)"
                           minimized="widgetMinimizedHandler(event)"
                           open="widgetOpenedHandler(event)"
                           widgetHeight="{wHeight}"
                           widgetWidth="{wWidth}">
        <s:Group id="mainState"
                 width="100%" height="100%"
                 visible="false"
                 visible.mainState="true">
            <s:layout>
                <s:VerticalLayout gap="6"
                                  horizontalAlign="center"
                                  paddingLeft="5"/>
            </s:layout>
            <!--
            //  BEGIN STEP 3:  REPLACE Rect component WITH WIDGET MAIN UI
            //-->
            <s:Scroller width="100%" height="100%">
                <s:VGroup>
                    <esri:Legend id="legend"
                                 left="5" right="5" top="5" bottom="5"
                                 layers="{[demographicsLayer]}"
                                 map="{map}"
                                 skinClass="widgets.Thematic.skins.GRLegendSkin"/>
                </s:VGroup>
            </s:Scroller>
            <!--
            //  END STEP 3:  REPLACE Rect component WITH WIDGET MAIN UI
            //-->
        </s:Group>
        <s:Group id="settingsState"
                 width="100%" height="100%"
                 visible="false"
                 visible.settingsState="true">
            <s:layout>
                <s:VerticalLayout gap="6"
                                  horizontalAlign="left"
                                  paddingLeft="5"/>
            </s:layout>
            <!--
             //  BEGIN STEP 4:  REPLACE Rect component WITH WIDGET SETTINGS UI
             //-->
            <s:HGroup id="boxClassificationMethods"
                      width="100%"
                      gap="5"
                      horizontalAlign="left"
                      verticalAlign="middle">
                <s:Label width="100" text="{classificationMethodsLabel}"/>
                <s:DropDownList id="classificationMethodsDDL"
                                width="100%"
                                change="classificationMethodsDDL_changeHandler(event)"
                                requireSelection="true"/>
            </s:HGroup>
            <s:HGroup id="boxClassificationFields"
                      width="100%"
                      gap="5"
                      horizontalAlign="left"
                      verticalAlign="middle">
                <s:Label width="100" text="{classificationFieldsLabel}"/>
                <s:DropDownList id="classificationFieldsDDL"
                                width="100%"
                                change="classificationFieldsDDL_changeHandler(event)"
                                requireSelection="true"
                                selectedIndex="1"/>
            </s:HGroup>
            <s:HGroup id="boxClassificationBreaks"
                      width="100%"
                      gap="5"
                      horizontalAlign="left"
                      verticalAlign="middle">
                <s:Label width="100" text="{classificationBreaksLabel}"/>
                <s:NumericStepper id="numberOfClassBreaks" change="numberOfClassBreaks_changeHandler(event)"/>
            </s:HGroup>
            <!--
            //  END STEP 4:  REPLACE Rect component WITH WIDGET SETTINGS UI
            //-->
            <!-- color ramp UI -->
            <s:HGroup id="boxToColor"
                      width="100%"
                      gap="5"
                      horizontalAlign="left"
                      verticalAlign="middle">
                <s:Label id="lblToColor"
                         width="100"
                         text="{toColorLabel}"/>
                <mx:ColorPicker id="colorRampToColor"
                                width="53"
                                change="colorRamp_changeHandler(event)"
                                selectedColor="{colorRampToSelectedColor}"/>
            </s:HGroup>
            <s:HGroup id="boxFromColor"
                      width="100%"
                      gap="5"
                      horizontalAlign="left"
                      verticalAlign="middle">
                <s:Label id="lblFromColor"
                         width="100"
                         text="{fromColorLabel}"/>
                <mx:ColorPicker id="colorRampFromColor"
                                width="53"
                                change="colorRamp_changeHandler(event)"
                                selectedColor="{colorRampFromSelectedColor}"/>
            </s:HGroup>
            <!-- transparency UI -->
            <s:HGroup id="boxTransp"
                      width="100%"
                      gap="5"
                      horizontalAlign="left"
                      verticalAlign="middle">
                <s:Label id="lblLayerTransp"
                         width="100"
                         text="{transpCompLabel}"/>
                <s:HSlider id="sliderTransparency"
                           width="100%"
                           change="transparencyChangeHandler(event)"
                           liveDragging="true"
                           maximum="1"
                           minimum="0"
                           showDataTip="true"
                           stepSize="0.1"
                           value="{thematicLayerAlpha}"/>
            </s:HGroup>

        </s:Group>
    </viewer:WidgetTemplate>
</viewer:BaseWidget>
